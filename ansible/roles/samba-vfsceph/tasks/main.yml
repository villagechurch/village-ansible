---
# file: roles/samba-vfsceph/tasks/main.yml

- name: Installing samba
  package:
    name:
      - samba
    state: present
  tags: first_run

- name: be sure samba is running and enabled
  service:
    name: smb
    state: started
    enabled: yes

- name: copy samba config
  copy: 
    src: "{{ item }}"
    dest: "/etc/samba/{{ item }}" 
    mode: 0644
  with_items:
    - smb.conf
  notify:
    - restart samba

- name: permit traffic in default zone for samba service
  ansible.posix.firewalld:
    service: samba
    permanent: yes
    state: enabled
  notify:
    - restart firewalld
  tags: first_run

## avahi service traffic permitted through firewall as a part of bootstrap
- name: copy avahi service config
  copy: 
    src: "smb.service.avahi"
    dest: "/etc/avahi/services/smb.service" 
    mode: 0644
  notify:
    - restart avahi-daemon

- name: Create Samba shares root directory
  file:
    state: directory
    path: "/mnt/ceph"
    owner: root
    group: root
    mode: '0755'
  tags: first_run


# ** cephfs mount - production ** #
- name: create production user
  user:
    name: "production"
    comment: "Village Production"
    groups: "users"
    shell: "/sbin/nologin"
    state: present
  register: user

- name: create production mount directory
  file:
    state: directory
    path: "/mnt/ceph/production"
    owner: "root"
    group: "users"
    mode: "2775"

- name: ensure ceph-fuse mount is persistent
  lineinfile:
    path: /etc/fstab
    regexp: '^none    \/mnt\/ceph\/production  fuse\.ceph ceph\.id={{ inventory_hostname }},ceph.client_mountpoint=\/production,ceph\.conf=\/etc\/ceph\/ceph\.conf,_netdev,defaults  0 0'
    line: 'none    /mnt/ceph/production  fuse.ceph ceph.id={{ inventory_hostname }},ceph.client_mountpoint=/production,ceph.conf=/etc/ceph/ceph.conf,_netdev,defaults  0 0'
  notify:
    - remount all partitions
  ignore_errors: true

- name: start ceph-fuse services
  service: 
    name: "ceph-fuse@-mnt-ceph-production.service"
    state: started
    enabled: yes
  tags: first_run

#- name: Put SELinux in permissive mode, logging actions that would be blocked.
#  ansible.posix.selinux:
#    policy: targeted
#    state: permissive

- name: Disable SELinux
  ansible.posix.selinux:
    state: disabled
